# Task ID: 16
# Title: 프론트엔드 설정 및 테스트 통합 페이지 개발
# Status: deferred
# Dependencies: 11, 14, 15
# Priority: medium
# Description: 분리된 Next.js 프론트엔드 애플리케이션에 RAG 시스템의 설정·테스트·대시보드 화면을 구현한다. 백엔드 서버는 별도 저장소에서 독립적으로 구동되며, 프론트엔드는 REST API 및 WebSocket으로만 서버와 통신한다. 서버 실행 스크립트나 통합 dev-server 기동 로직은 프론트엔드 저장소에 포함하지 않는다.
# Details:
## 구현 원칙

* 본 작업은 **Next.js 전용 프론트엔드 저장소**에서 진행한다. FastAPI 백엔드(tax_rag_backend)와의 실행·배포 파이프라인은 분리하며, 프론트엔드는 API 호출 및 WebSocket 통신만 담당한다.
* `npm run dev`(Next.js) 실행 시 프론트엔드만 기동되고, 서버 주소는 환경 변수(`NEXT_PUBLIC_API_URL`, `NEXT_PUBLIC_WS_URL`)로 주입한다.
* README 및 코드 주석에서 백엔드 기동 명령이나 통합 start 스크립트를 명시하지 않는다.

## 핵심 구현 항목(변경 없음)
1. **서버 연결 모듈 (web/util/api.ts)**
   * axios 인스턴스(`api`) 생성, 문서/설정/RAG 쿼리 관련 함수 제공
2. **WebSocket 훅 (web/util/websocket.ts)**
   * 연결/해제, 메시지 송수신, 재연결 로직
3. **Settings 페이지 (web/pages/settings.tsx)**
   * 문서 청킹 파라미터 관리, WebSocket 상태 뱃지
4. **Test 페이지 (web/pages/test.tsx)**
   * 문서 선택 후 RAG 쿼리 실행, 결과·실시간 로그 표시
5. **Dashboard, Layout, Navigation**
   * 문서 업로드/삭제, 서버 상태 카드, 전역 레이아웃
6. **_app.tsx**
   * 전역 레이아웃 적용
7. **.env.local 예시**
   * 외부 서버 주소만 포함(서버 기동 명령 삭제)

기존 코드 조각은 변경 없이 유지하되, 주석/README 및 향후 PR 설명에서 "서버와 프론트엔드를 동시에 실행" 같은 표현을 제거하고 "백엔드 별도 실행"을 명확히 한다.

# Test Strategy:
## 테스트 전략 (서버 별도 구동 전제)

1. **단위 테스트 (Jest/React Testing Library)**
   - API 모듈: axios mock 으로 각 함수의 URL·메서드·페이로드 검증
   - WebSocket 훅: mock-socket 으로 연결/재연결/메시지 처리 검증
   - 각 페이지 컴포넌트: UI 상호작용, 상태 변화 테스트

2. **통합 테스트 (프론트엔드 ↔ 실제 서버)**
   - 백엔드가 별도 포트에서 기동된 상태에서 `NEXT_PUBLIC_API_URL` 을 해당 주소로 설정 후 테스트
   - 문서 CRUD, 설정 저장, RAG 쿼리 end-to-end 시나리오 검증

3. **E2E 테스트 (Cypress)**
   - 사용자가 브라우저에서 수행할 전체 플로우(문서 업로드→설정→테스트) 자동화
   - cypress 실행 전 백엔드가 기동되어 있어야 하며, start 명령은 프론트엔드 repo 에 포함하지 않음

4. **브라우저·반응형·접근성·성능 테스트**
   - 기존 계획과 동일

5. **수동 체크리스트**
   - [ ] 프론트엔드 단독 `npm run dev` 로 정상 기동되는지 확인
   - [ ] 환경 변수만 변경하여 서로 다른 서버(로컬/스테이징/프로덕션)와 문제없이 통신하는지 확인

# Subtasks:
## 1. 서버 API 연결 모듈 구현 [pending]
### Dependencies: None
### Description: Next.js 환경에서 백엔드 API와 통신하는 axios 기반의 중앙화된 API 모듈(api.ts)을 개발한다.
### Details:
문서 목록 조회, 문서 설정 조회/저장, 문서 업로드/삭제, RAG 쿼리 테스트 등 모든 API 호출을 담당하는 함수들을 구현한다. 환경 변수 기반으로 API 엔드포인트를 설정하고, 예외 처리 및 응답 구조를 표준화한다.
<info added on 2025-07-19T13:07:42.826Z>
• RAG 시스템 파라미터(temperature, top_k, 모델명 등)를 GET/PUT 할 수 있는 api.ragSettings(), 이를 사용하는 useRagSettings 훅과 /settings 페이지(가벼운 폼 UI) 추가  
• RAG 쿼리 결과를 실시간 확인할 /playground 페이지 구현: 질문 입력 → api.ragQuery() 호출 → 응답·citations 출력  
• WebSocket 연결 상태를 주기적 ping(5s 간격)으로 점검하는 useWsStatus 훅 작성, 실패 시 reconnect() 및 화면 배지(red/green) 표시  
• AppRouter에 /settings, /playground 경로 배치, Chakra UI 기본 컴포넌트로 최소 스타일링 적용
</info added on 2025-07-19T13:07:42.826Z>

## 2. WebSocket 연결 모듈 및 상태 훅 개발 [pending]
### Dependencies: 16.1
### Description: WebSocket 연결을 관리하는 커스텀 훅(websocket.ts)을 구현하여 실시간 서버 상태 및 메시지 송수신 기능을 제공한다.
### Details:
WebSocket 연결/해제, 메시지 수신/전송, 연결 상태 및 에러 관리, 메시지 배열 관리 등 실시간 통신을 위한 공통 로직을 커스텀 훅으로 구현한다.

## 3. RAG 시스템 설정 페이지 개발 [pending]
### Dependencies: 16.1, 16.2
### Description: 문서 청킹 설정, 서버 연결 상태 점검 등 RAG 시스템의 주요 설정을 관리하는 설정 페이지(settings.tsx)를 개발한다.
### Details:
문서 목록 및 설정 조회, 설정 변경/저장, 서버 WebSocket 연결 상태 표시 및 제어, 입력값 검증, 사용자 피드백 메시지 표시 등 UX를 고려한 UI/로직을 구현한다.

## 4. RAG 테스트 페이지 개발 [pending]
### Dependencies: 16.1, 16.2
### Description: 문서 선택 및 쿼리 입력을 통한 RAG 테스트, WebSocket 실시간 메시지 확인 등 테스트 기능을 제공하는 페이지(test.tsx)를 개발한다.
### Details:
문서 선택, 쿼리 입력 및 실행, REST 및 WebSocket 기반 RAG 쿼리 결과 표시, 에러 및 로딩 상태 관리, 실시간 메시지 로그 표시 등 테스트 워크플로우를 구현한다.

## 5. 통합 대시보드 및 공통 레이아웃/네비게이션 구축 [pending]
### Dependencies: 16.1, 16.2, 16.3, 16.4
### Description: 문서 업로드/삭제, 서버 상태, 빠른 링크 등 통합 관리 기능을 제공하는 대시보드(dashboard.tsx)와 공통 레이아웃(Layout.tsx), 네비게이션(Navigation.tsx) 컴포넌트를 개발한다.
### Details:
대시보드에서 문서 목록 관리, 서버 연결 상태 표시, 페이지 간 이동 링크 제공, 전체 앱에 일관된 레이아웃과 네비게이션 적용을 위한 컴포넌트 구조를 설계/구현한다.

