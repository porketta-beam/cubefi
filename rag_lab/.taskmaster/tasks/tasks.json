{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "프로젝트 저장소 스캐폴딩 및 기본 FastAPI 헬스체크",
        "description": "Poetry 기반 패키지 관리, pre-commit, lint, 테스트 폴더를 설정하고 FastAPI 서버에 헬스체크 라우트를 노출한다.",
        "details": "• poetry new tax_rag_backend && cd tax_rag_backend\n• pyproject.toml 에 fastapi==0.111, uvicorn[standard]==0.30, pydantic==2 추가\n• pre-commit: ruff, black, isort, mypy 훅 설정\n• main.py\n    from fastapi import FastAPI\n    app = FastAPI(title=\"Tax RAG API\")\n    @app.get(\"/health\")\n    async def health():\n        return {\"status\": \"ok\"}\n• uvicorn main:app --reload 로 수동 기동 확인",
        "testStrategy": "pytest 에서 /health 호출 → 200 & {\"status\":\"ok\"} 검증\nCI(GitHub Actions) 에 pytest + ruff + mypy 워크플로우 추가",
        "priority": "medium",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Redis 세션 메모리 레이어 구축",
        "description": "ConversationBufferWindowMemory 를 RedisChatMessageHistory 로 래핑하여 세션별 k턴(6) 단기 컨텍스트를 저장/조회한다.",
        "details": "• poetry add redis>=5.0 langchain==0.2\n• settings.py: REDIS_URL env 로드, redis.asyncio.Redis 풀 생성\n• memory.py\n    class RedisSessionMemory(ConversationBufferWindowMemory):\n        def __init__(self,k:int=6):\n            super().__init__(chat_memory=RedisChatMessageHistory(\n                 session_id=\"\", k=k, ttl=1800, client=redis_client))\n• LPUSH/LTRIM 구현, HistoryItem 모델 직렬화는 orjson 사용",
        "testStrategy": "pytest-asyncio 로 세션 생성→ 8회 메시지 삽입 후 길이 6 확인\nTTL 만료 모킹하여 자동 삭제 검증",
        "priority": "medium",
        "dependencies": [],
        "status": "deferred",
        "subtasks": [
          {
            "id": 1,
            "title": "환경 변수 로딩 및 Redis 클라이언트 풀 초기화",
            "description": "settings.py에서 REDIS_URL을 읽어 비동기 Redis 풀(redis.asyncio.Redis)을 생성한다.",
            "dependencies": [],
            "details": "• dotenv 또는 pydantic Settings 사용\n• 싱글톤 패턴으로 redis_client 노출\n• poetry add redis>=5.0\n• 실패 시 예외 로깅",
            "status": "in-progress",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "ChatMessageHistory 직렬화 포맷 정의",
            "description": "HistoryItem 모델과 orjson 기반 직렬화/역직렬화 헬퍼를 구현한다.",
            "dependencies": [
              1
            ],
            "details": "• dataclass HistoryItem(role:str, content:str, ts:float)\n• dumps/loads 래퍼에서 orjson 사용\n• 유닛 테스트로 round-trip 보장",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "RedisSessionMemory 클래스 구현",
            "description": "ConversationBufferWindowMemory를 상속해 k-턴 윈도우 및 TTL 지원 Redis 저장소를 완성한다.",
            "dependencies": [
              2
            ],
            "details": "• __init__(session_id:str,k:int=6,ttl:int=1800)\n• add_message → LPUSH + LTRIM\n• messages → LRANGE 역순 반환 후 loads\n• expire 설정으로 TTL 갱신",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "pytest-asyncio 기반 TTL·윈도우 검증 테스트 작성",
            "description": "8회 메시지 삽입 시 길이 6 유지 및 TTL 만료 후 자동 삭제를 모킹하여 검증한다.",
            "dependencies": [
              3
            ],
            "details": "• fakeredis 또는 시간 모킹 사용\n• assert len(memory.messages)==6\n• fast-forward 1801s 후 키 미존재 확인",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "문서화 및 예제 코드 작성",
            "description": "README 및 docstring에 사용 방법, 예제 세션 코드, 테스트 실행법을 추가한다.",
            "dependencies": [
              4
            ],
            "details": "• README: 설치→환경변수→예제 스니펫\n• docs/source/memory.md 작성\n• 코드 블록에 async 사용 예시 포함",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 3,
        "title": "임베딩 파이프라인 및 Chroma 벡터 DB 초기화",
        "description": "세법 문서 크롤링 결과를 text-embedding-3-large 로 임베딩한 뒤 Chroma 0.5 영구 클라이언트에 적재한다.",
        "details": "• poetry add chromadb==0.5 openai==1.25 duckdb\n• ingest.py\n    docs = load_documents(\"data/tax_docs/*.md\")\n    embeddings = OpenAIEmbeddings(model=\"text-embedding-3-large\",chunk_size=512)\n    vectordb = Chroma(collection_name=\"tax_docs\",embedding_function=embeddings,persist_directory=\".chroma\")\n    vectordb.add_documents(docs)\n    vectordb.persist()\n• nightly_backup.sh → aws s3 sync .chroma s3://backup",
        "testStrategy": "pytest 로 3개 샘플 문서 임베딩 후 vectordb.similarity_search(\"양도소득세\") 결과 top-k>0 확인\nS3 모킹으로 백업 스크립트 exit 0 검증",
        "priority": "medium",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "문서 로더 작성",
            "description": "세법 문서 크롤링 결과를 불러와 텍스트 데이터로 변환하는 로더를 구현합니다.",
            "dependencies": [],
            "details": "• data/tax_docs/*.md 경로의 마크다운 파일을 읽어 리스트 형태로 반환하는 load_documents 함수를 작성합니다.\n• 파일 인코딩, 예외 처리, 텍스트 전처리(불필요한 공백/문자 제거) 등을 포함합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "OpenAI 임베딩 생성 로직 구현",
            "description": "불러온 문서 리스트를 OpenAI text-embedding-3-large 모델로 임베딩하는 로직을 구현합니다.",
            "dependencies": [
              1
            ],
            "details": "• OpenAIEmbeddings(model=\"text-embedding-3-large\", chunk_size=512) 객체를 생성합니다.\n• 문서 리스트를 입력받아 임베딩 벡터 리스트로 변환합니다.\n• 임베딩 실패/오류 케이스에 대한 예외 처리를 추가합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Chroma 컬렉션 초기화 및 적재",
            "description": "Chroma 0.5 PersistentClient를 사용해 컬렉션을 초기화하고 임베딩된 문서를 적재합니다.",
            "dependencies": [
              2
            ],
            "details": "• chromadb.PersistentClient(path=\".chroma\")로 클라이언트 생성\n• 컬렉션 존재 시 삭제 후 재생성, 없으면 새로 생성\n• add_documents로 문서와 임베딩, 메타데이터를 컬렉션에 추가\n• vectordb.persist()로 영속화 수행",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "영속화 및 S3 백업 스크립트 작성",
            "description": "Chroma DB의 영속화된 데이터를 AWS S3로 백업하는 스크립트를 작성합니다.",
            "dependencies": [
              3
            ],
            "details": "• nightly_backup.sh 스크립트에서 aws s3 sync .chroma s3://backup 명령어 작성\n• S3 버킷, IAM 권한, 에러 핸들링, 로그 기록 추가\n• 주기적 실행을 위한 크론탭 등록 방법 문서화",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "샘플 데이터 테스트 및 자동화 파이프라인 설정",
            "description": "샘플 문서로 임베딩-적재-검색-백업 전체 파이프라인을 테스트하고, 크론/워크플로 자동화 설정을 완료합니다.",
            "dependencies": [
              4
            ],
            "details": "• pytest로 3개 샘플 문서 임베딩 후 vectordb.similarity_search(\"양도소득세\") 결과 top-k>0 확인\n• S3 모킹으로 백업 스크립트 exit 0 검증\n• 전체 파이프라인을 크론탭 또는 워크플로로 자동화, 실패 시 알림 설정",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "RAG 검색 체인 구성",
        "description": "LangChain StuffDocumentsChain 을 이용해 검색→응답 파이프라인을 생성하고 citations 메타데이터를 유지한다.",
        "details": "• poetry add langchain-openai==0.2\n• rag_chain.py\n    retriever = vectordb.as_retriever(search_kwargs={\"k\":4})\n    llm = ChatOpenAI(model_name=\"gpt-4o-mini\",temperature=0.2)\n    chain = (RunnableWithMessageHistory(\n        StuffDocumentsChain(llm=llm,retriever=retriever),\n        memory=RedisSessionMemory()))\n    chain = chain.with_config(tags=[\"rag\",\"tax\"],callbacks=[langsmith_tracer])\n• output_parser 에 citation_index 삽입",
        "testStrategy": "로컬 함수 호출로 \"ISA 세금 면제 한도?\" 질의 → chain 반환 dict 에 \"citations\" 리스트 길이>0 검증",
        "priority": "medium",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "SSE 스트리밍 어댑터 및 /chat 엔드포인트 구현",
        "description": "LangChain Runnable 과 FastAPI StreamingResponse 를 연결하여 GPT 토큰을 실시간으로 SSE 포맷으로 전송한다.",
        "details": "• poetry add sse-starlette\n• sse_adapter.py\n    async def stream_chain(request,chat_req):\n        async for chunk in chain.astream(chat_req.message,session_id=chat_req.session_id):\n            yield f\"data:{chunk.json()}\\n\\n\"\n• routes/chat.py\n    @router.post(\"/chat\")\n    async def chat(req:ChatRequest):\n        return EventSourceResponse(stream_chain(req))\n• JWT 헤더 검증: fastapi-security==0.7, upstream JWKS 캐시\n• CORS 미들웨어 *허용",
        "testStrategy": "pytest-asyncio + httpx.AsyncClient 로 /chat 호출 → 이벤트 스트림을 수신, finish==True 포함 검증",
        "priority": "medium",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "세금 계산기 Python 모듈 개발",
        "description": "국세청 세율 표를 기반으로 종합과세·ISA·연금저축 시나리오별 세후 수익률을 결정론적으로 계산하는 엔진을 구현하고, LangChain-Agent가 호출할 수 있도록 RAG 체인에 도구(StructuredTool) 형태로 통합한다.",
        "status": "deferred",
        "dependencies": [],
        "priority": "medium",
        "details": "구현 위치 변경 및 모듈 구조 통합\n• api/services/tax_calculator.py\n    – 세율 테이블 상수화(국세청 기준)\n    – calc(input:TaxCalcInput) -> TaxCalcOutput  : 종합과세·ISA·연금저축 로직\n• api/models/tax_models.py\n    – TaxCalcInput(BaseModel): income:int, invest:int, product:str, horizon:int\n    – TaxCalcOutput(BaseModel): after_tax_return:Decimal, saved_tax:Decimal, breakdown:dict[str, Decimal]\n• api/services/tax_tools.py\n    – TaxCalcTool(StructuredTool) : 위 calc 함수 래핑, Agent 호출 인터페이스 제공\n• rag_config_service.py\n    – 기존 RAG 검색 체인 + TaxCalcTool 를 Agent 하나로 통합, 스트리밍 응답 유지\n",
        "testStrategy": "pytest 단위 테스트: 국세청 공식 예시와 동일한 세액·세후수익률 산출(assert Decimal('0.1543'))\npytest-asyncio 통합 테스트: FastAPI 엔드포인트 → RAG+TaxCalc Agent 호출 시 JSON 스트리밍 응답 검증\ncoverage-xml 기준 95% 이상",
        "subtasks": [
          {
            "id": 1,
            "title": "세금 계산 엔진 개발",
            "description": "세율 테이블 상수화(국세청 기준) 및 핵심 계산 로직(종합과세, ISA, 연금저축)을 구현한다.",
            "status": "pending",
            "dependencies": [],
            "details": "파일: api/services/tax_calculator.py\n• TAX_BRACKETS 딕셔너리/튜플 리스트로 세율, 누진공제액 정의\n• def calc(input:TaxCalcInput) -> TaxCalcOutput:\n      – 각 상품타입별 과세 방식 분기\n      – horizon<=0, 음수 투자금 등 예외 처리\n      – Decimal 사용해 반올림 오차 방지\n• breakdown 필드에 구간별 세액·세후금액 포함",
            "testStrategy": "pytest: 경계 구간·음수 입력·0기간 등 10개 이상 케이스"
          },
          {
            "id": 2,
            "title": "Pydantic 데이터 모델 정의",
            "description": "입력 모델(소득, 투자금액, 상품타입, 투자기간)과 출력 모델(세후수익률, 절약세액, 세부계산내역)을 정의한다.",
            "status": "pending",
            "dependencies": [
              1
            ],
            "details": "파일: api/models/tax_models.py\nclass TaxCalcInput(BaseModel):\n    income:int\n    invest:int\n    product:str  # 'composite'|'isa'|'pension'\n    horizon:int  # 년\nclass TaxCalcOutput(BaseModel):\n    after_tax_return:Decimal\n    saved_tax:Decimal\n    breakdown:dict[str, Decimal]",
            "testStrategy": "pydantic 모델 유효성 테스트(잘못된 product, 음수 값 ValidationError 확인)"
          },
          {
            "id": 3,
            "title": "LangChain Tool 통합",
            "description": "StructuredTool 래퍼 클래스를 구현하여 계산 엔진을 LangChain Agent에서 호출 가능하도록 한다.",
            "status": "pending",
            "dependencies": [
              2
            ],
            "details": "파일: api/services/tax_tools.py\nTaxCalcTool = StructuredTool.from_function(\n    name='tax_calculator',\n    description='국세청 기준 세금 계산기',\n    func=calc,\n    args_schema=TaxCalcInput,\n    return_schema=TaxCalcOutput,\n)",
            "testStrategy": "tool.invoke 샘플 호출 → TaxCalcOutput 검증"
          },
          {
            "id": 4,
            "title": "RAG Chain에 Agent 통합",
            "description": "rag_config_service.py를 수정하여 RAG 검색 체인과 TaxCalcTool을 하나의 Agent로 통합하고 스트리밍 응답을 유지한다.",
            "status": "pending",
            "dependencies": [
              3
            ],
            "details": "• RunnableWithMessageHistory → AgentExecutor 변경\n• Tools=[TaxCalcTool, retriever_tool] 로 등록\n• StreamingStdOutCallbackHandler 사용해 스트리밍 유지\n• 기존 기능 회귀 테스트 포함",
            "testStrategy": "pytest-asyncio: 사용자 질문→Agent 스트리밍 응답에 세금 계산 결과 포함 확인"
          },
          {
            "id": 5,
            "title": "통합 테스트 및 검증",
            "description": "단위 테스트(계산 정확성)와 통합 테스트(챗봇 응답)를 포함하여 전체 기능을 검증하고 95% 이상 커버리지를 달성한다.",
            "status": "pending",
            "dependencies": [
              4
            ],
            "details": "• pytest-cov 설정\n• FastAPI TestClient로 /chat POST → 세금 계산 + RAG 답변 시나리오 검증\n• 국세청 PDF 예제값 대비 오차 ±1원 이내",
            "testStrategy": "coverage run -m pytest && coverage html → 95% 이상 여부 CI에서 체크"
          }
        ]
      },
      {
        "id": 7,
        "title": "/history 엔드포인트 구현",
        "description": "Redis 에 저장된 최근 k턴 대화내역을 조회하여 반환한다.",
        "details": "• routes/history.py\n    @router.get(\"/history/{session_id}\")\n    async def history(session_id:UUID):\n        msgs = redis_client.lrange(f\"session:{session_id}\",0,k-1)\n        return [HistoryItem.model_validate_json(m) for m in msgs]\n• FastAPI response_model=List[HistoryItem]",
        "testStrategy": "pytest 로 대화 3턴 입력 후 GET /history 반환 길이 3 확인 및 순서 역순 아님 확인",
        "priority": "medium",
        "dependencies": [],
        "status": "deferred",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "/evaluate 엔드포인트 및 RAGAS 배치 스크립트",
        "description": "이미 구현-완료된 auto_rag/mod/evaluation_manager.py 를 활용해 POST /evaluate 로 들어온 dataset_id 를 Celery 비동기 작업으로 전달하고 RAGAS 메트릭( faithfulness, answer_relevancy, context_precision, context_recall )을 산출‧저장한다.",
        "status": "done",
        "dependencies": [],
        "priority": "medium",
        "details": "• poetry add ragas==0.2 celery[redis] 은 선행 작업에서 반영 완료\n• auto_rag/mod/evaluation_manager.py\n    class EvaluationManager:\n        @staticmethod\n        def evaluate(dataset_id:str)->dict:  # faithfulness, answer_relevancy, context_precision, context_recall\n            ...  # 구현 완료\n• tasks/eval.py\n    @celery_app.task(name=\"run_ragas\")\n    def run_ragas(dataset_id:str):\n        metrics = EvaluationManager.evaluate(dataset_id)\n        store_results(metrics)  # DB 또는 S3 저장 모듈 재사용\n        return metrics\n• routes/evaluate.py\n    @router.post(\"/evaluate\")\n    async def evaluate(req:EvalRequest):\n        task_id = run_ragas.delay(req.dataset_id)\n        return {\"task_id\": task_id}\n• GitHub Actions 배치 실행 유지: schedule: \"0 3 * * *\" → poetry run celery -A tasks.eval\n",
        "testStrategy": "pytest 에서 dataset fixture 로 run_ragas.s(dataset_id).apply().get() 호출 후 반환 dict 에 faithfulness, answer_relevancy, context_precision, context_recall 키가 모두 존재하고 float 값임을 확인한다.",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "LangSmith 및 OpenTelemetry 관측성 통합",
        "description": "auto_rag 모듈 전반(RAG 코어, Streamlit, FastAPI 서버)에 LangSmith 및 OpenTelemetry 기반 분산 추적을 적용해 모든 문서 검색·LLM 호출·API 요청의 지연시간과 오류율을 LangSmith 대시보드에서 확인할 수 있도록 한다.",
        "status": "done",
        "dependencies": [],
        "priority": "medium",
        "details": "• poetry add langsmith==0.3 opentelemetry-sdk opentelemetry-exporter-otlp\n• auto_rag/mod/langsmith_monitor.py: LangSmith Client, trace 컨텍스트 매니저, get_tracer 헬퍼 구현\n• rag_system_manager.py: get_answer() 내부에서 문서 검색 span, LLM 호출 span 분리\n• FastAPIInstrumentor.instrument_app(app, excluded_urls=\"/health,/docs\")\n• Streamlit·WebSocket 경로에도 langsmith_monitor.trace 사용\n• settings(.env): LANGSMITH_API_KEY, LANGSMITH_PROJECT, OTEL_EXPORTER_OTLP_ENDPOINT 등 환경 변수 정의",
        "testStrategy": "1) pytest -k \"langsmith\" → get_answer() 호출 시 run_id·parent span 구조 확인\n2) Streamlit 앱에서 실제 질문 입력 후 LangSmith UI에서 트레이스 트리 확인\n3) Locust 100 rps 부하 → OTLP Collector에서 샘플링 100% 및 Span 수 = 요청 수 * 3(get_answer, search, call_llm) 검증\n4) FastAPI WebSocket 채널 /chat 스트리밍 호출 시 Span 누락 없는지 확인",
        "subtasks": [
          {
            "id": 1,
            "title": "LangSmith 기본 설정 및 모니터링 모듈 생성",
            "description": "auto_rag/mod/langsmith_monitor.py를 생성하여 LangSmith Client 래퍼, trace 컨텍스트 매니저, get_tracer를 구현하고 LANGSMITH_API_KEY 등 환경 변수를 설정한다.",
            "status": "done",
            "dependencies": [],
            "details": "• poetry add langsmith==0.3 opentelemetry-sdk opentelemetry-exporter-otlp\n• .env 및 settings.py에 LANGSMITH_API_KEY, LANGSMITH_PROJECT, OTEL_EXPORTER_OTLP_ENDPOINT, OTEL_SDK_DISABLED=false 추가\n• langsmith_monitor.py\n    from langsmith import Client\n    from opentelemetry import trace\n    _client = Client()\n    def trace_span(name: str):\n        ...  # contextmanager로 Span 시작/종료 및 LangSmith 기록\n• 초깃값으로 trace_span(\"init\") 호출하여 모듈 import 시 LangSmith 연결 확인",
            "testStrategy": "pytest auto_rag/tests/test_monitor.py → trace_span(\"dummy\") 사용 시 LangSmith run_id 반환 여부 확인"
          },
          {
            "id": 2,
            "title": "auto_rag RAG 시스템에 LangSmith 추적 적용",
            "description": "rag_system_manager.py의 get_answer() 메서드에 LangSmith 추적을 추가하고, 문서 검색과 LLM 호출을 별도 Span으로 분리한다.",
            "status": "done",
            "dependencies": [
              1
            ],
            "details": "• rag_system_manager.py\n    from auto_rag.mod.langsmith_monitor import trace_span\n    def get_answer(question):\n        with trace_span(\"get_answer\"):\n            with trace_span(\"vector_search\"):\n                docs = vectordb.similarity_search(question)\n            with trace_span(\"call_llm\"):\n                answer = llm.invoke(docs, question)\n            return answer\n• 호출 스택에 tags={\"component\":\"RAG\"} 부여",
            "testStrategy": "pytest → get_answer('세율은?') 호출 후 LangSmith 대시보드에서 get_answer > vector_search > call_llm 계층 구조 확인"
          },
          {
            "id": 3,
            "title": "Streamlit 앱에서 LangSmith 통합 테스트",
            "description": "rag_streamlit_v2.py에서 모니터링된 RAG 시스템을 사용해 실제 질문을 입력하고 LangSmith 대시보드에서 트레이스를 시각적으로 검증한다.",
            "status": "done",
            "dependencies": [
              2
            ],
            "details": "• rag_streamlit_v2.py\n    from auto_rag.mod.langsmith_monitor import trace_span\n    with trace_span(\"streamlit_session\"):\n        answer = rag_manager.get_answer(query)\n• st.button(\"LangSmith 열기\") 클릭 시 대시보드 링크 제공",
            "testStrategy": "streamlit run rag_streamlit_v2.py → '장기보유특별공제' 질문 후 LangSmith에서 streamlit_session 포함 여부 확인"
          },
          {
            "id": 4,
            "title": "API 서버로 확장 및 FastAPI 인스트루먼트 적용",
            "description": "api/services/rag_config_service.py, server.py(WebSocket) 등에 LangSmith 추적을 적용하고 FastAPIInstrumentor를 사용해 전체 시스템 성능을 검증한다.",
            "status": "done",
            "dependencies": [
              3
            ],
            "details": "• api/services/rag_config_service.py\n    with trace_span(\"rag_api_request\"):\n        answer = rag_manager.get_answer(req.question)\n• server.py\n    FastAPIInstrumentor.instrument_app(app, excluded_urls=\"/health,/docs\")\n    WebSocket 엔드포인트 on_receive 내부에 trace_span(\"ws_message\") 적용\n• Locustfile.py에서 100 rps 부하 시 모든 Span 수집 확인",
            "testStrategy": "Locust 부하 테스트 결과 → OTLP Collector에서 rag_api_request + vector_search + call_llm span 누락 0건, P95 지연시간 < 400ms"
          }
        ]
      },
      {
        "id": 10,
        "title": "OpenAPI 문서 검수 및 전면 단위 테스트 보강",
        "description": "FastAPI 자동 스키마를 검토하고 pydantic 모델 예제 추가, pytest 에서 모든 라우트 케이스를 커버 후 CI 배지 표시.",
        "details": "• main.py 에 app = FastAPI(openapi_tags=[...])\n• 각 모델 Config.model_config[\"json_schema_extra\"] 로 example 삽입\n• pytest-cov 및 fastapi-testclient 로 /chat,/history,/evaluate 표준 시나리오 작성\n• README.md 에 coverage badge, docs url 명시",
        "testStrategy": "pytest-cov 90% 기준을 GH Actions에서 강제, schemathesis 로 openapi.yaml fuzz => 0 error 통과",
        "priority": "medium",
        "dependencies": [
          "2",
          "6",
          "7",
          "9"
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-15T09:33:41.655Z",
      "updated": "2025-07-19T11:04:22.644Z",
      "description": "Tasks for master context"
    }
  }
}