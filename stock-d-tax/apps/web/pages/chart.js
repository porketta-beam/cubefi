import { useState, useEffect } from 'react';
import Head from 'next/head';
import { Line, Bar } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import styles from '../styles/TaxCalculator.module.css';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend
);

export default function ChartPage() {
  const [activeTab, setActiveTab] = useState('foreign'); // 'foreign' or 'dividend'
  const [foreignStocks, setForeignStocks] = useState([]);
  const [dividendStocks, setDividendStocks] = useState([]);
  
  // Ìèº ÏÉÅÌÉú
  const [newStock, setNewStock] = useState({
    name: '',
    ticker: '',
    avgPrice: '',
    currentPrice: '',
    quantity: '',
    realizedProfit: '', // Ïã§ÌòÑÏàòÏùµ
    expectedDividend: '' // ÏòàÏÉÅÎ∞∞Îãπ (Î∞∞ÎãπÏ£ºÎßå)
  });

  // Í≥ÑÏÇ∞ Í≤∞Í≥º ÏÉÅÌÉú
  const [calculations, setCalculations] = useState({
    foreign: {
      totalRealized: 0,
      totalUnrealized: 0,
      totalCombined: 0,
      taxableAmount: 0,
      tax: 0,
      afterTaxProfit: 0
    },
    dividend: {
      totalRealized: 0,
      totalExpected: 0,
      totalCombined: 0,
      taxableAmount: 0,
      tax: 0,
      afterTaxProfit: 0,
      isComprehensive: false
    }
  });

  // Í≤ΩÍ≥† ÏÉÅÌÉú
  const [alerts, setAlerts] = useState([]);
  const [showStrategyModal, setShowStrategyModal] = useState(false); // Î™®Îã¨ ÏÉÅÌÉú Ï∂îÍ∞Ä

  // Í≥ÑÏÇ∞ Ìï®Ïàò
  const calculateTaxes = () => {
    // Ìï¥Ïô∏Ï£ºÏãù Í≥ÑÏÇ∞
    const foreignTotal = foreignStocks.reduce((acc, stock) => {
      const realized = parseFloat(stock.realizedProfit) || 0;
      const unrealized = (parseFloat(stock.currentPrice) - parseFloat(stock.avgPrice)) * parseFloat(stock.quantity) || 0;
      return {
        realized: acc.realized + realized,
        unrealized: acc.unrealized + unrealized,
        combined: acc.combined + realized + unrealized
      };
    }, { realized: 0, unrealized: 0, combined: 0 });

    const foreignTaxableAmount = Math.max(0, foreignTotal.combined - 2500000); // 250ÎßåÏõê Í≥µÏ†ú
    const foreignTax = foreignTaxableAmount * 0.22; // 22% ÏÑ∏Ïú®

    // Î∞∞ÎãπÏ£º Í≥ÑÏÇ∞
    const dividendTotal = dividendStocks.reduce((acc, stock) => {
      const realized = parseFloat(stock.realizedProfit) || 0;
      const expected = parseFloat(stock.expectedDividend) || 0;
      return {
        realized: acc.realized + realized,
        expected: acc.expected + expected,
        combined: acc.combined + realized + expected
      };
    }, { realized: 0, expected: 0, combined: 0 });

    const isComprehensive = dividendTotal.combined > 20000000; // 2000ÎßåÏõê Ï¥àÍ≥ºÏãú Ï¢ÖÌï©Í≥ºÏÑ∏
    const dividendTaxableAmount = Math.max(0, dividendTotal.combined - 20000000);
    const dividendTax = isComprehensive ? dividendTaxableAmount * 0.35 : dividendTotal.combined * 0.154; // Ï¢ÖÌï©Í≥ºÏÑ∏ 35% vs Î∂ÑÎ¶¨Í≥ºÏÑ∏ 15.4%

    // Í≥ÑÏÇ∞ Í≤∞Í≥º ÏóÖÎç∞Ïù¥Ìä∏
    setCalculations({
      foreign: {
        totalRealized: foreignTotal.realized,
        totalUnrealized: foreignTotal.unrealized,
        totalCombined: foreignTotal.combined,
        taxableAmount: foreignTaxableAmount,
        tax: foreignTax,
        afterTaxProfit: foreignTotal.combined - foreignTax
      },
      dividend: {
        totalRealized: dividendTotal.realized,
        totalExpected: dividendTotal.expected,
        totalCombined: dividendTotal.combined,
        taxableAmount: dividendTaxableAmount,
        tax: dividendTax,
        afterTaxProfit: dividendTotal.combined - dividendTax,
        isComprehensive
      }
    });

    // Í≤ΩÍ≥† ÏÉùÏÑ±
    const newAlerts = [];
    
    if (foreignTotal.combined > 2000000) {
      newAlerts.push({
        type: 'warning',
        icon: '‚ö†Ô∏è',
        text: `Ìï¥Ïô∏Ï£ºÏãù ÏàòÏùµÏù¥ 250ÎßåÏõêÏùÑ Ï¥àÍ≥ºÌñàÏäµÎãàÎã§. Ï¥àÍ≥ºÎ∂Ñ ${(foreignTotal.combined - 2500000).toLocaleString()}ÏõêÏóê ÎåÄÌï¥ 22% ÏÑ∏Í∏àÏù¥ Î∂ÄÍ≥ºÎê©ÎãàÎã§.`
      });
    }

    if (dividendTotal.combined > 15000000) {
      newAlerts.push({
        type: 'warning',
        icon: 'üö®',
        text: `Î∞∞ÎãπÏàòÏùµÏù¥ 1,500ÎßåÏõêÏùÑ Ï¥àÍ≥ºÌñàÏäµÎãàÎã§. 2,000ÎßåÏõê Ï¥àÍ≥º Ïãú Ï¢ÖÌï©Í≥ºÏÑ∏ Ï†ÑÌôòÏùÑ Í≥†Î†§ÌïòÏÑ∏Ïöî.`
      });
    }

    if (isComprehensive) {
      newAlerts.push({
        type: 'warning',
        icon: 'üìä',
        text: `Î∞∞ÎãπÏàòÏùµÏù¥ 2,000ÎßåÏõêÏùÑ Ï¥àÍ≥ºÌïòÏó¨ Ï¢ÖÌï©Í≥ºÏÑ∏ ÎåÄÏÉÅÏûÖÎãàÎã§. ÏÑ∏Ïú®Ïù¥ ÌÅ¨Í≤å Ï¶ùÍ∞ÄÌï† Ïàò ÏûàÏäµÎãàÎã§.`
      });
    }

    if (newAlerts.length === 0) {
      newAlerts.push({
        type: 'info',
        icon: '‚úÖ',
        text: 'ÌòÑÏû¨ ÏÑ∏Í∏à Î∂ÄÎã¥Ïù¥ ÏµúÏ†ÅÌôîÎêú ÏÉÅÌÉúÏûÖÎãàÎã§.'
      });
    }

    setAlerts(newAlerts);
  };

  // Ï¢ÖÎ™© Ï∂îÍ∞Ä
  const addStock = () => {
    if (!newStock.name || !newStock.avgPrice || !newStock.currentPrice || !newStock.quantity) {
      alert('ÌïÑÏàò Ï†ïÎ≥¥Î•º Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    const stock = {
      id: Date.now(),
      ...newStock,
      avgPrice: parseFloat(newStock.avgPrice),
      currentPrice: parseFloat(newStock.currentPrice),
      quantity: parseFloat(newStock.quantity),
      realizedProfit: parseFloat(newStock.realizedProfit) || 0,
      expectedDividend: parseFloat(newStock.expectedDividend) || 0
    };

    if (activeTab === 'foreign') {
      setForeignStocks([...foreignStocks, stock]);
    } else {
      setDividendStocks([...dividendStocks, stock]);
    }

    // Ìèº Ï¥àÍ∏∞Ìôî
    setNewStock({
      name: '',
      ticker: '',
      avgPrice: '',
      currentPrice: '',
      quantity: '',
      realizedProfit: '',
      expectedDividend: ''
    });
  };

  // Ï¢ÖÎ™© ÏÇ≠Ï†ú
  const deleteStock = (id) => {
    if (activeTab === 'foreign') {
      setForeignStocks(foreignStocks.filter(stock => stock.id !== id));
    } else {
      setDividendStocks(dividendStocks.filter(stock => stock.id !== id));
    }
  };

  // Í≥ÑÏÇ∞ Ìä∏Î¶¨Í±∞
  useEffect(() => {
    calculateTaxes();
  }, [foreignStocks, dividendStocks]);

  const currentStocks = activeTab === 'foreign' ? foreignStocks : dividendStocks;
  const currentCalc = calculations[activeTab];

  // Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï§ÄÎπÑ - Ïã§ÏãúÍ∞Ñ Ïó∞Îèô
  const dividendLimit = 20000000; // 2000ÎßåÏõê ÌïúÎèÑ
  const foreignLimit = 2500000; // 250ÎßåÏõê ÌïúÎèÑ
  
  // Ïã§Ï†ú Í≥ÑÏÇ∞Îêú Í∞í ÎòêÎäî ÏµúÏÜå ÌïúÎèÑÍ∞í ÏÇ¨Ïö©
  const dividendProfit = Math.max(calculations.dividend.totalCombined, dividendLimit);
  const dividendTax = calculations.dividend.tax;
  const dividendLabels = ['Î∞∞ÎãπÏÜåÎìù ÌòÑÌô©'];

  const isOverDividend = calculations.dividend.totalCombined > dividendLimit;
  const dividendBarData = {
    labels: dividendLabels,
    datasets: isOverDividend
      ? [
          {
            label: 'Ï¢ÖÌï©Í≥ºÏÑ∏ ÎåÄÏÉÅÏï°',
            data: [calculations.dividend.totalCombined],
            backgroundColor: '#ff6384',
            borderRadius: 6,
            barThickness: 100,
            stack: 'total',
          },
        ]
      : [
          {
            label: 'ÌòÑÏû¨ Î∞∞ÎãπÏàòÏùµ',
            data: [calculations.dividend.totalCombined],
            backgroundColor: '#36a2eb',
            borderRadius: 6,
            barThickness: 100,
            stack: 'total',
          },
          {
            label: 'Î∂ÑÎ¶¨Í≥ºÏÑ∏ Í∞ÄÎä•Ïï°',
            data: [dividendLimit - calculations.dividend.totalCombined],
            backgroundColor: '#2ee86c88',
            borderRadius: 6,
            barThickness: 100,
            stack: 'total',
          },
        ],
  };

  // ÏñëÎèÑÏÜåÎìùÏÑ∏ Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ - Ïã§ÏãúÍ∞Ñ Ïó∞Îèô
  const transferProfit = Math.max(calculations.foreign.totalCombined, foreignLimit);
  const transferTax = calculations.foreign.tax;
  const transferLabels = ['Ìï¥Ïô∏Ï£ºÏãù ÌòÑÌô©'];
  
  const isOverForeign = calculations.foreign.totalCombined > foreignLimit;
  const transferBarData = {
    labels: transferLabels,
    datasets: isOverForeign
      ? [
      {
            label: 'Í≥ºÏÑ∏ ÎåÄÏÉÅÏï°',
            data: [calculations.foreign.totalCombined - foreignLimit],
        backgroundColor: '#ff6384',
        borderRadius: 6,
        barThickness: 100,
        stack: 'total',
      },
      {
            label: 'ÎπÑÍ≥ºÏÑ∏ ÌïúÎèÑ',
            data: [foreignLimit],
            backgroundColor: '#2ee86c88',
            borderRadius: 6,
            barThickness: 100,
            stack: 'total',
          },
        ]
      : [
          {
            label: 'ÌòÑÏû¨ ÏàòÏùµ',
            data: [calculations.foreign.totalCombined],
            backgroundColor: '#36a2eb',
            borderRadius: 6,
            barThickness: 100,
            stack: 'total',
          },
          {
            label: 'ÎπÑÍ≥ºÏÑ∏ Í∞ÄÎä•Ïï°',
            data: [foreignLimit - calculations.foreign.totalCombined],
        backgroundColor: '#2ee86c88',
        borderRadius: 6,
        barThickness: 100,
        stack: 'total',
      },
    ],
  };
  
  const accountBarOptions = {
    responsive: true,
    maintainAspectRatio: false,
    indexAxis: 'y',
    plugins: {
      legend: {
        position: 'bottom',
        labels: {
          color: '#fff',
          font: { size: 14, weight: '600' },
          padding: 20,
          usePointStyle: true,
          pointStyle: 'rectRounded',
        },
      },
      tooltip: {
        backgroundColor: 'rgba(0, 0, 0, 0.8)',
        titleColor: '#fff',
        bodyColor: '#fff',
        borderColor: 'rgba(46, 232, 108, 0.3)',
        borderWidth: 1,
        cornerRadius: 8,
        callbacks: {
          label: function (context) {
            const value = context.raw?.toLocaleString() ?? '';
            return `${context.dataset.label}: ‚Ç©${value}`;
          },
        },
        titleFont: { size: 14, weight: '600' },
        bodyFont: { size: 13 },
      },
    },
    scales: {
      x: {
        beginAtZero: true,
        ticks: {
          color: '#b0b8c1',
          font: { size: 11 },
          callback: function(value) {
            if (value === 0) return '‚Ç©0';
            if (value >= 1000000) {
              return `‚Ç©${(value / 10000).toFixed(0)}Îßå`;
            }
            return `‚Ç©${value.toLocaleString()}`;
          },
        },
        grid: { 
          color: 'rgba(255,255,255,0.05)',
          lineWidth: 1,
        },
        border: {
          color: 'rgba(255,255,255,0.1)',
        },
      },
      y: {
        ticks: {
          display: false,
        },
        grid: { 
          display: false,
        },
        border: {
          display: false,
        },
      },
    },
  };

  // Î∞∞ÎãπÏÜåÎìùÏÑ∏ Ï∞®Ìä∏ ÏòµÏÖò (ÎèôÏ†Å Ïä§ÏºÄÏùº)
  const dividendBarOptions = {
    ...accountBarOptions,
    scales: {
      ...accountBarOptions.scales,
      x: {
        ...accountBarOptions.scales.x,
        stacked: true,
        max: Math.max(dividendProfit, dividendLimit * 1.2),
        ticks: {
          ...accountBarOptions.scales.x.ticks,
          callback: function(value) {
            if (value === 0 || value === dividendLimit || value === dividendProfit) {
              return `‚Ç©${value.toLocaleString()}`;
            }
            return '';
          },
        },
      },
      y: {
        ...accountBarOptions.scales.y,
        stacked: true,
      },
    },
  };

  // ÏñëÎèÑÏÜåÎìùÏÑ∏ Ï∞®Ìä∏ ÏòµÏÖò (ÎèôÏ†Å Ïä§ÏºÄÏùº)
  const transferBarOptions = {
    ...accountBarOptions,
    scales: {
      ...accountBarOptions.scales,
      x: {
        ...accountBarOptions.scales.x,
        stacked: true,
        max: Math.max(transferProfit, foreignLimit * 1.2),
        ticks: {
          ...accountBarOptions.scales.x.ticks,
          callback: function(value) {
            if (value === 0 || value === foreignLimit || value === transferProfit) {
              return `‚Ç©${value.toLocaleString()}`;
            }
            return '';
          },
        },
      },
      y: {
        ...accountBarOptions.scales.y,
        stacked: true,
      },
    },
  };

  return (
    <>
      <Head>
        <title>ÏÑ∏Í∏à Í≥ÑÏÇ∞Í∏∞ - Stock D-TAX</title>
        <meta name="description" content="Î≥¥Ïú† Ìè¨ÏßÄÏÖòÍπåÏßÄ Ìè¨Ìï®Ìïú ÌÜµÌï© ÏÑ∏Í∏à Í≥ÑÏÇ∞Í∏∞" />
      </Head>

      <div className={styles.taxCalculatorContainer}>
        <h1 className={styles.pageTitle}>ÌÜµÌï© ÏÑ∏Í∏à Í≥ÑÏÇ∞Í∏∞</h1>
        
        {/* ÌÜµÌï© ÏÑ∏Í∏à Ï†ïÎ≥¥ Î∞è ÌòÑÌô© Ïπ¥Îìú */}
        <div className={styles.infoCardsSection}>
          <div className={styles.infoCard}>
            <div className={styles.infoCardHeader}>
              <span className={styles.infoCardIcon}>üåç</span>
              <h3 className={styles.infoCardTitle}>Ìï¥Ïô∏Ï£ºÏãù ÏñëÎèÑÏÜåÎìùÏÑ∏</h3>
            </div>
            <div className={styles.infoCardContent}>
              {/* ÌòÑÏû¨ ÏÉÅÌÉú Î∞∞ÏßÄ - ÌïúÎèÑ Ï†ïÎ≥¥ Ìè¨Ìï® */}
              <div className={`${styles.statusBadge} ${isOverForeign ? styles.danger : styles.safe}`} style={{margin: '20px 0'}}>
                <span className={styles.statusIcon}>{isOverForeign ? '‚ö†Ô∏è' : '‚úÖ'}</span>
                <div className={styles.statusContent}>
                  <span className={styles.statusText}>
                    {isOverForeign 
                      ? 'Í≥ºÏÑ∏ ÎåÄÏÉÅ (Ï¥àÍ≥ºÎ∂Ñ 22% ÏÑ∏Ïú®)'
                      : 'ÎπÑÍ≥ºÏÑ∏ ÌïúÎèÑ ÎÇ¥ (ÏÑ∏Í∏à ÏóÜÏùå)'
                    }
                  </span>
                  <span className={styles.statusLimit}>Ïó∞Í∞Ñ 250ÎßåÏõê</span>
                </div>
              </div>

              {/* ÌòÑÏû¨ ÏàòÏùµ ÌÜµÍ≥Ñ */}
              <div className={styles.chartStats} style={{margin: '20px 0'}}>
                <div className={styles.statItem}>
                  <span className={styles.statLabel}>ÌòÑÏû¨ Ï¥ùÏàòÏùµ</span>
                  <span className={styles.statValue}>
                    {calculations.foreign.totalCombined.toLocaleString()}Ïõê
                  </span>
                </div>
                <div className={styles.statDivider}></div>
                <div className={styles.statItem}>
                  <span className={styles.statLabel}>ÌïúÎèÑ</span>
                  <span className={`${styles.statValue} ${styles.limit}`}>
                    250ÎßåÏõê
                  </span>
                </div>
              </div>

              {/* Ï∞®Ìä∏ */}
              <div className={styles.chartWrapper}>
                <Bar data={transferBarData} options={transferBarOptions} />
              </div>
              
              {/* ÏÑ§Î™Ö */}
              <p className={styles.infoDescription}>
                Ìï¥Ïô∏Ï£ºÏãù Îß§Îß§Î°ú Î∞úÏÉùÌïú <strong>Ïã§ÌòÑÏÜêÏùµ + ÎØ∏Ïã§ÌòÑÏÜêÏùµ</strong>Ïù¥ Ïó∞Í∞Ñ 250ÎßåÏõêÏùÑ Ï¥àÍ≥ºÌïòÎäî Í≤ΩÏö∞, 
                Ï¥àÍ≥ºÎ∂ÑÏóê ÎåÄÌï¥ <strong>22% ÏÑ∏Ïú®</strong>Ïù¥ Ï†ÅÏö©Îê©ÎãàÎã§.
              </p>
              
              <div className={styles.strategyButtonWrapper}>
                <button className={styles.strategyButton} onClick={() => setShowStrategyModal(true)}>
                  Ï†àÏÑ∏ Ï†ÑÎûµ ÌôïÏù∏ÌïòÍ∏∞
                </button>
              </div>
            </div>
          </div>

          <div className={styles.infoCard}>
            <div className={styles.infoCardHeader}>
              <span className={styles.infoCardIcon}>üí∞</span>
              <h3 className={styles.infoCardTitle}>Î∞∞ÎãπÏÜåÎìùÏÑ∏</h3>
            </div>
            <div className={styles.infoCardContent}>
              {/* ÌòÑÏû¨ ÏÉÅÌÉú Î∞∞ÏßÄ - ÌïúÎèÑ Ï†ïÎ≥¥ Ìè¨Ìï® */}
              <div className={`${styles.statusBadge} ${isOverDividend ? styles.danger : styles.safe}`} style={{margin: '20px 0'}}>
                <span className={styles.statusIcon}>{isOverDividend ? '‚ö†Ô∏è' : '‚úÖ'}</span>
                <div className={styles.statusContent}>
                  <span className={styles.statusText}>
                    {isOverDividend 
                      ? 'Ï¢ÖÌï©Í≥ºÏÑ∏ ÎåÄÏÉÅ (ÎàÑÏßÑÏÑ∏Ïú® Ï†ÅÏö©)'
                      : 'Î∂ÑÎ¶¨Í≥ºÏÑ∏ Ï†ÅÏö© Ï§ë (ÏÑ∏Ïú® 15.4%)'
                    }
                  </span>
                  <span className={styles.statusLimit}>Ïó∞Í∞Ñ 2,000ÎßåÏõê</span>
                </div>
              </div>

              {/* ÌòÑÏû¨ ÏàòÏùµ ÌÜµÍ≥Ñ */}
              <div className={styles.chartStats} style={{margin: '20px 0'}}>
                <div className={styles.statItem}>
                  <span className={styles.statLabel}>ÌòÑÏû¨ Î∞∞ÎãπÏàòÏùµ</span>
                  <span className={styles.statValue}>
                    {calculations.dividend.totalCombined.toLocaleString()}Ïõê
                  </span>
                </div>
                <div className={styles.statDivider}></div>
                <div className={styles.statItem}>
                  <span className={styles.statLabel}>ÌïúÎèÑ</span>
                  <span className={`${styles.statValue} ${styles.limit}`}>
                    2,000ÎßåÏõê
                  </span>
                </div>
              </div>

              {/* Ï∞®Ìä∏ */}
              <div className={styles.chartWrapper}>
        <Bar data={dividendBarData} options={dividendBarOptions} />
      </div>
              
              {/* ÏÑ§Î™Ö */}
              <p className={styles.infoDescription}>
                Î∞∞ÎãπÏàòÏùµÏù¥ Ïó∞Í∞Ñ 2,000ÎßåÏõêÏùÑ Ï¥àÍ≥ºÌïòÎ©¥ <strong>Ï¢ÖÌï©Í≥ºÏÑ∏</strong> ÎåÄÏÉÅÏù¥ ÎêòÏñ¥ 
                Îã§Î•∏ ÏÜåÎìùÍ≥º Ìï©ÏÇ∞ÌïòÏó¨ <strong>ÎàÑÏßÑÏÑ∏Ïú®(ÏµúÎåÄ 45%)</strong>Ïù¥ Ï†ÅÏö©Îê©ÎãàÎã§.
              </p>
              
              {/* Í≥ºÏÑ∏ Î∞©Ïãù ÏÑ§Î™Ö */}
              <div className={styles.taxMethods}>
                <div className={styles.taxMethod}>
                  <h5>üìä Î∂ÑÎ¶¨Í≥ºÏÑ∏ (2,000ÎßåÏõê Ïù¥Ìïò)</h5>
                  <p>Î∞∞ÎãπÏÜåÎìùÏÑ∏ 15.4% (ÏÜåÎìùÏÑ∏ 14% + ÏßÄÎ∞©ÏÜåÎìùÏÑ∏ 1.4%)</p>
                </div>
                <div className={styles.taxMethod}>
                  <h5>üìà Ï¢ÖÌï©Í≥ºÏÑ∏ (2,000ÎßåÏõê Ï¥àÍ≥º)</h5>
                  <p>Îã§Î•∏ ÏÜåÎìùÍ≥º Ìï©ÏÇ∞ÌïòÏó¨ ÎàÑÏßÑÏÑ∏Ïú® Ï†ÅÏö© (ÏµúÎåÄ 45%)</p>
                </div>
              </div>
            
              <div className={styles.strategyButtonWrapper}>
                <button className={styles.strategyButton} onClick={() => setShowStrategyModal(true)}>
                  Ï†àÏÑ∏ Ï†ÑÎûµ ÌôïÏù∏ÌïòÍ∏∞
                </button>
              </div>
            </div>
          </div>
        </div>
        
        <div className={styles.mainLayout}>
          {/* ÌòÑÌô© ÎåÄÏãúÎ≥¥Îìú */}
          <div className={styles.statusDashboard}>
            <h2 className={styles.dashboardTitle}>Ïã§ÏãúÍ∞Ñ ÏÑ∏Í∏à ÌòÑÌô©</h2>
            
            <div className={styles.statusCards}>
              <div className={`${styles.statusCard} ${calculations.foreign.totalCombined > 2500000 ? styles.warning : styles.safe}`}>
                <div className={styles.cardLabel}>Ìï¥Ïô∏Ï£ºÏãù Ï¥ùÏàòÏùµ</div>
                <div className={`${styles.cardValue} ${calculations.foreign.totalCombined > 2500000 ? styles.warning : styles.safe}`}>
                  {calculations.foreign.totalCombined.toLocaleString()}Ïõê
                </div>
                <div className={styles.cardSubtext}>
                  ÌïúÎèÑ: 250ÎßåÏõê / ÏÑ∏Ïú®: 22%
                </div>
              </div>
              
              <div className={`${styles.statusCard} ${calculations.dividend.isComprehensive ? styles.warning : styles.safe}`}>
                <div className={styles.cardLabel}>Î∞∞Îãπ Ï¥ùÏàòÏùµ</div>
                <div className={`${styles.cardValue} ${calculations.dividend.isComprehensive ? styles.danger : styles.safe}`}>
                  {calculations.dividend.totalCombined.toLocaleString()}Ïõê
                </div>
                <div className={styles.cardSubtext}>
                  {calculations.dividend.isComprehensive ? 'Ï¢ÖÌï©Í≥ºÏÑ∏ ÎåÄÏÉÅ' : 'Î∂ÑÎ¶¨Í≥ºÏÑ∏ Ï†ÅÏö©'}
                </div>
              </div>
            </div>

            {/* Í≤ΩÍ≥† ÏÑπÏÖò */}
            <div className={styles.alertSection}>
              {alerts.map((alert, index) => (
                <div key={index} className={`${styles.alertItem} ${styles[alert.type]}`}>
                  <span className={styles.alertIcon}>{alert.icon}</span>
                  <span className={styles.alertText}>{alert.text}</span>
                </div>
              ))}
            </div>

            {/* Ï¥ù ÏÑ∏ÌõÑ ÏàòÏùµ */}
            <div className={styles.statusCard}>
              <div className={styles.cardLabel}>Ï¥ù ÏÑ∏ÌõÑ ÏàòÏùµ</div>
              <div className={`${styles.cardValue} ${styles.safe}`}>
                {(calculations.foreign.afterTaxProfit + calculations.dividend.afterTaxProfit).toLocaleString()}Ïõê
              </div>
              <div className={styles.cardSubtext}>
                ÏÑ∏Í∏à: {(calculations.foreign.tax + calculations.dividend.tax).toLocaleString()}Ïõê
              </div>
            </div>
          </div>

          {/* ÏûÖÎ†• ÏÑπÏÖò */}
          <div className={styles.inputSection}>
            <h2 className={styles.sectionTitle}>
              üìä Ï¢ÖÎ™© Í¥ÄÎ¶¨
            </h2>
            
            <div className={styles.tabButtons}>
              <button 
                className={`${styles.tabButton} ${activeTab === 'foreign' ? styles.active : ''}`}
                onClick={() => setActiveTab('foreign')}
              >
                üåé Ìï¥Ïô∏Ï£ºÏãù
              </button>
              <button 
                className={`${styles.tabButton} ${activeTab === 'dividend' ? styles.active : ''}`}
                onClick={() => setActiveTab('dividend')}
              >
                üí∞ Î∞∞ÎãπÏ£º
              </button>
            </div>

            <div className={styles.stockForm}>
              <div className={styles.formGroup}>
                <label className={styles.formLabel}>Ï¢ÖÎ™©Î™Ö</label>
                <input
                  type="text"
                  className={styles.formInput}
                  value={newStock.name}
                  onChange={(e) => setNewStock({...newStock, name: e.target.value})}
                  placeholder="ÏÇºÏÑ±Ï†ÑÏûê"
                />
              </div>
              
              <div className={styles.formGroup}>
                <label className={styles.formLabel}>Ìã∞Ïª§</label>
                <input
                  type="text"
                  className={styles.formInput}
                  value={newStock.ticker}
                  onChange={(e) => setNewStock({...newStock, ticker: e.target.value})}
                  placeholder="005930"
                />
              </div>
              
              <div className={styles.formGroup}>
                <label className={styles.formLabel}>ÌèâÍ∑†Îã®Í∞Ä</label>
                <input
                  type="number"
                  className={styles.formInput}
                  value={newStock.avgPrice}
                  onChange={(e) => setNewStock({...newStock, avgPrice: e.target.value})}
                  placeholder="65000"
                />
              </div>
              
              <div className={styles.formGroup}>
                <label className={styles.formLabel}>ÌòÑÏû¨Í∞Ä</label>
                <input
                  type="number"
                  className={styles.formInput}
                  value={newStock.currentPrice}
                  onChange={(e) => setNewStock({...newStock, currentPrice: e.target.value})}
                  placeholder="68000"
                />
              </div>
              
              <div className={styles.formGroup}>
                <label className={styles.formLabel}>Î≥¥Ïú†ÏàòÎüâ</label>
                <input
                  type="number"
                  className={styles.formInput}
                  value={newStock.quantity}
                  onChange={(e) => setNewStock({...newStock, quantity: e.target.value})}
                  placeholder="100"
                />
              </div>
              
              <div className={styles.formGroup}>
                <label className={styles.formLabel}>Ïã§ÌòÑÏàòÏùµ</label>
                <input
                  type="number"
                  className={styles.formInput}
                  value={newStock.realizedProfit}
                  onChange={(e) => setNewStock({...newStock, realizedProfit: e.target.value})}
                  placeholder="1000000"
                />
              </div>
              
              {activeTab === 'dividend' && (
                <div className={styles.formGroup}>
                  <label className={styles.formLabel}>ÏòàÏÉÅÎ∞∞Îãπ</label>
                  <input
                    type="number"
                    className={styles.formInput}
                    value={newStock.expectedDividend}
                    onChange={(e) => setNewStock({...newStock, expectedDividend: e.target.value})}
                    placeholder="500000"
                  />
                </div>
              )}
            </div>

            <div className={styles.formActions}>
              <button className={styles.addButton} onClick={addStock}>
                Ï¢ÖÎ™© Ï∂îÍ∞Ä
              </button>
              <button 
                className={styles.clearButton} 
                onClick={() => activeTab === 'foreign' ? setForeignStocks([]) : setDividendStocks([])}
              >
                Ï†ÑÏ≤¥ ÏÇ≠Ï†ú
              </button>
            </div>
          </div>
      </div>
      
        {/* Î≥¥Ïú† Ï¢ÖÎ™© ÌÖåÏù¥Î∏î */}
        <div className={styles.holdingsSection}>
          <h2 className={styles.sectionTitle}>
            üìà {activeTab === 'foreign' ? 'Ìï¥Ïô∏Ï£ºÏãù' : 'Î∞∞ÎãπÏ£º'} Î≥¥Ïú† ÌòÑÌô©
          </h2>
          
          <div className={styles.holdingsTable}>
            <table>
              <thead>
                <tr>
                  <th>Ï¢ÖÎ™©Ï†ïÎ≥¥</th>
                  <th>ÌèâÍ∑†Îã®Í∞Ä</th>
                  <th>ÌòÑÏû¨Í∞Ä</th>
                  <th>Î≥¥Ïú†ÏàòÎüâ</th>
                  <th>Ïã§ÌòÑÏàòÏùµ</th>
                  <th>ÌèâÍ∞ÄÏ∞®Ïùµ</th>
                  {activeTab === 'dividend' && <th>ÏòàÏÉÅÎ∞∞Îãπ</th>}
                  <th>Ï¥ù ÏàòÏùµ</th>
                  <th>ÏòàÏÉÅÏÑ∏Í∏à</th>
                  <th>Í¥ÄÎ¶¨</th>
                </tr>
              </thead>
              <tbody>
                {currentStocks.map((stock) => {
                  const unrealizedProfit = (stock.currentPrice - stock.avgPrice) * stock.quantity;
                  const totalProfit = stock.realizedProfit + unrealizedProfit + (stock.expectedDividend || 0);
                  const taxRate = activeTab === 'foreign' ? 0.22 : (calculations.dividend.isComprehensive ? 0.35 : 0.154);
                  const estimatedTax = Math.max(0, totalProfit - (activeTab === 'foreign' ? 2500000 : 20000000)) * taxRate;
                  
                  return (
                    <tr key={stock.id}>
                      <td>
                        <div className={styles.stockInfo}>
                          <div className={styles.stockName}>{stock.name}</div>
                          <div className={styles.stockTicker}>{stock.ticker}</div>
                        </div>
                      </td>
                      <td>{stock.avgPrice.toLocaleString()}Ïõê</td>
                      <td>{stock.currentPrice.toLocaleString()}Ïõê</td>
                      <td>{stock.quantity.toLocaleString()}Ï£º</td>
                      <td>
                        <span className={`${styles.profitCell} ${stock.realizedProfit >= 0 ? styles.positive : styles.negative}`}>
                          {stock.realizedProfit.toLocaleString()}Ïõê
                        </span>
                      </td>
                      <td>
                        <span className={`${styles.profitCell} ${unrealizedProfit >= 0 ? styles.positive : styles.negative}`}>
                          {unrealizedProfit.toLocaleString()}Ïõê
                        </span>
                      </td>
                      {activeTab === 'dividend' && (
                        <td>
                          <span className={`${styles.profitCell} ${styles.positive}`}>
                            {stock.expectedDividend.toLocaleString()}Ïõê
                          </span>
                        </td>
                      )}
                      <td>
                        <span className={`${styles.profitCell} ${totalProfit >= 0 ? styles.positive : styles.negative}`}>
                          {totalProfit.toLocaleString()}Ïõê
                        </span>
                      </td>
                      <td>
                        <span className={`${styles.taxCell} ${estimatedTax > 0 ? styles.high : styles.normal}`}>
                          {estimatedTax.toLocaleString()}Ïõê
                        </span>
                      </td>
                      <td className={styles.actionCell}>
                        <button 
                          className={styles.deleteButton}
                          onClick={() => deleteStock(stock.id)}
                        >
                          ÏÇ≠Ï†ú
                        </button>
                      </td>
                    </tr>
                  );
                })}
                {currentStocks.length === 0 && (
                  <tr>
                    <td colSpan={activeTab === 'dividend' ? "10" : "9"} style={{textAlign: 'center', padding: '40px', color: '#888'}}>
                      Îì±Î°ùÎêú Ï¢ÖÎ™©Ïù¥ ÏóÜÏäµÎãàÎã§. ÏúÑÏóêÏÑú Ï¢ÖÎ™©ÏùÑ Ï∂îÍ∞ÄÌï¥Ï£ºÏÑ∏Ïöî.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>

        {/* ÏãúÎÆ¨Î†àÏù¥ÏÖò Í≤∞Í≥º */}
        <div className={styles.simulationSection}>
          <h2 className={styles.sectionTitle}>
            üéØ ÏÑ∏Í∏à ÏãúÎÆ¨Î†àÏù¥ÏÖò Í≤∞Í≥º
          </h2>
          
          <div className={styles.simulationGrid}>
            <div className={`${styles.simulationCard} ${styles.foreign}`}>
              <h3 className={styles.simulationCardTitle}>
                üåé Ìï¥Ïô∏Ï£ºÏãù ÏÑ∏Í∏à Î∂ÑÏÑù
              </h3>
              <div className={styles.simulationRow}>
                <span className={styles.simulationLabel}>Ïã§ÌòÑÏàòÏùµ</span>
                <span className={styles.simulationValue}>{calculations.foreign.totalRealized.toLocaleString()}Ïõê</span>
              </div>
              <div className={styles.simulationRow}>
                <span className={styles.simulationLabel}>ÌèâÍ∞ÄÏ∞®Ïùµ (Î≥¥Ïú†Î∂Ñ)</span>
                <span className={styles.simulationValue}>{calculations.foreign.totalUnrealized.toLocaleString()}Ïõê</span>
              </div>
              <div className={styles.simulationRow}>
                <span className={styles.simulationLabel}>Ï¥ù Ïû†Ï†ïÏàòÏùµ</span>
                <span className={styles.simulationValue}>{calculations.foreign.totalCombined.toLocaleString()}Ïõê</span>
              </div>
              <div className={styles.simulationRow}>
                <span className={styles.simulationLabel}>Í≥ºÏÑ∏ ÎåÄÏÉÅÏï°</span>
                <span className={`${styles.simulationValue} ${calculations.foreign.taxableAmount > 0 ? styles.warning : styles.safe}`}>
                  {calculations.foreign.taxableAmount.toLocaleString()}Ïõê
                </span>
              </div>
              <div className={styles.simulationRow}>
                <span className={styles.simulationLabel}>ÏòàÏÉÅ ÏÑ∏Í∏à (22%)</span>
                <span className={`${styles.simulationValue} ${calculations.foreign.tax > 0 ? styles.warning : styles.safe}`}>
                  {calculations.foreign.tax.toLocaleString()}Ïõê
                </span>
              </div>
              <div className={styles.simulationRow}>
                <span className={styles.simulationLabel}>ÏÑ∏ÌõÑ ÏàòÏùµ</span>
                <span className={styles.simulationValue}>{calculations.foreign.afterTaxProfit.toLocaleString()}Ïõê</span>
              </div>
            </div>

            <div className={`${styles.simulationCard} ${styles.dividend}`}>
              <h3 className={styles.simulationCardTitle}>
                üí∞ Î∞∞ÎãπÏ£º ÏÑ∏Í∏à Î∂ÑÏÑù
              </h3>
              <div className={styles.simulationRow}>
                <span className={styles.simulationLabel}>Ïã§ÌòÑ Î∞∞ÎãπÏàòÏùµ</span>
                <span className={styles.simulationValue}>{calculations.dividend.totalRealized.toLocaleString()}Ïõê</span>
              </div>
              <div className={styles.simulationRow}>
                <span className={styles.simulationLabel}>ÏòàÏÉÅ Î∞∞ÎãπÏàòÏùµ</span>
                <span className={styles.simulationValue}>{calculations.dividend.totalExpected.toLocaleString()}Ïõê</span>
              </div>
              <div className={styles.simulationRow}>
                <span className={styles.simulationLabel}>Ï¥ù Î∞∞ÎãπÏàòÏùµ</span>
                <span className={styles.simulationValue}>{calculations.dividend.totalCombined.toLocaleString()}Ïõê</span>
              </div>
              <div className={styles.simulationRow}>
                <span className={styles.simulationLabel}>Í≥ºÏÑ∏ Î∞©Ïãù</span>
                <span className={`${styles.simulationValue} ${calculations.dividend.isComprehensive ? styles.warning : styles.safe}`}>
                  {calculations.dividend.isComprehensive ? 'Ï¢ÖÌï©Í≥ºÏÑ∏' : 'Î∂ÑÎ¶¨Í≥ºÏÑ∏'}
                </span>
              </div>
              <div className={styles.simulationRow}>
                <span className={styles.simulationLabel}>ÏòàÏÉÅ ÏÑ∏Í∏à</span>
                <span className={`${styles.simulationValue} ${calculations.dividend.tax > 0 ? styles.warning : styles.safe}`}>
                  {calculations.dividend.tax.toLocaleString()}Ïõê
                </span>
              </div>
              <div className={styles.simulationRow}>
                <span className={styles.simulationLabel}>ÏÑ∏ÌõÑ ÏàòÏùµ</span>
                <span className={styles.simulationValue}>{calculations.dividend.afterTaxProfit.toLocaleString()}Ïõê</span>
              </div>
            </div>
          </div>
      </div>
      {/* Ï†àÏÑ∏ Ï†ÑÎûµ Î™®Îã¨ */}
      {showStrategyModal && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          width: '100vw',
          height: '100vh',
          background: 'rgba(24,26,32,0.75)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 2000
        }}
          onClick={() => setShowStrategyModal(false)}
        >
          <div style={{
            background: '#23262f',
            borderRadius: 12,
            padding: '40px 32px',
            minWidth: 320,
            maxWidth: '90vw',
            color: '#fff',
            textAlign: 'center',
            position: 'relative',
            boxShadow: '0 4px 24px rgba(0,0,0,0.18)'
          }}
            onClick={e => e.stopPropagation()}
          >
            <h2 style={{color:'#2ee86c', marginBottom: '18px'}}>Ï†àÏÑ∏ Ï†ÑÎûµ</h2>
            <div style={{marginBottom: '32px'}}>Ïó¨Í∏∞Ïóê Ï†àÏÑ∏ Ï†ÑÎûµ ÎÇ¥Ïö© ÏûëÏÑ±ÌïòÍ∏∞!</div>
            <button style={{
              background: '#2ee86c',
              color: '#181a20',
              border: 'none',
              borderRadius: 6,
              padding: '10px 32px',
              fontSize: '1rem',
              fontWeight: 700,
              cursor: 'pointer',
              transition: 'background 0.18s',
            }}
              onClick={() => setShowStrategyModal(false)}
            >
              Îã´Í∏∞
            </button>
          </div>
        </div>
      )}
      </div>
    </>
  );
}